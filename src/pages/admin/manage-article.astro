---
export const prerender = false;
import { supabase } from "@/lib/supabaseClient";
import Layout from "../../layouts/Layout.astro";
import { SITE } from "@/config";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";

// If editing an existing article, you'd fetch it here based on URL params
const id = Astro.url.searchParams.get("id");
const isEditing = !!id;

let existingArticle = {
    id: null,
    title: "",
    description: "",
    body: "# Sample Article\n\nThis is **sample content** for the article editor.\n\n## Features\n\n- Markdown support\n- Live preview\n- Rich text editing\n\n```javascript\nconsole.log('Code highlighting works!');\n```",
    author: SITE.author,
    featured: false,
    tags: [],
};
let existingArticleError = null;

if (isEditing) {
    const { data, error } = await supabase
        .from("blogs")
        .select("*")
        .eq("id", id)
        .single();

    existingArticle = data;
    existingArticleError = error;
}

// Default content for new articles
const defaultBody = `# Your Article Title

Start writing your article here...
`;
---

<Layout title={isEditing ? "Edit Article" : "Create New Article"}>
    <div
        class="flex max-h-screen min-h-screen flex-col overflow-hidden bg-background text-foreground"
    >
        <!-- Header -->
        <header class="border-b bg-background shadow-sm">
            <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between py-6">
                    <div>
                        <h1 class="text-3xl font-bold text-foreground">
                            {isEditing ? "Edit Article" : "Create New Article"}
                        </h1>
                        <p class="mt-1 text-foreground/80">
                            {
                                isEditing
                                    ? "Update your article content"
                                    : "Write and publish your blog post"
                            }
                        </p>
                    </div>
                    <div class="flex space-x-12">
                        {
                            SITE.lightAndDarkMode && (
                                <li class="col-span-1 flex items-center justify-center">
                                    <button
                                        id="theme-btn"
                                        class="focus-outline relative size-16 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
                                        title="Toggles light & dark"
                                        aria-label="auto"
                                        aria-live="polite"
                                    >
                                        <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                                        <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
                                    </button>
                                </li>
                            )
                        }
                        <div class="flex space-x-3">
                            <a
                                href="/admin"
                                class="rounded-lg bg-accent px-4 py-2 font-medium text-foreground transition-colors duration-200 hover:bg-accent/80"
                            >
                                Cancel
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        {
            isEditing && existingArticleError && (
                <div class="mx-auto mt-4 w-full max-w-7xl rounded p-4 text-center text-red-500">
                    Error loading article: {existingArticleError.message}
                </div>
            )
        }

        <div
            class="mx-auto w-full max-w-7xl flex-grow overflow-auto px-4 py-8 sm:px-6 lg:px-8"
        >
            <form
                id="articleForm"
                class="space-y-6"
                data-is-editing={isEditing}
                data-id={existingArticle?.id || ""}
            >
                <!-- Article Metadata -->
                <div class="rounded-lg bg-muted p-6 shadow">
                    <h2 class="mb-4 text-lg font-semibold text-foreground">
                        Article Details
                    </h2>

                    <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
                        <div>
                            <label
                                for="title"
                                class="mb-2 block text-sm font-medium text-foreground"
                            >
                                Title *
                            </label>
                            <input
                                type="text"
                                id="title"
                                name="title"
                                value={existingArticle?.title || ""}
                                required
                                class="w-full rounded-lg border border-border px-3 py-2 focus:border-accent focus:ring-2 focus:ring-accent"
                                placeholder="Enter article title..."
                            />
                        </div>

                        <div>
                            <label
                                for="author"
                                class="mb-2 block text-sm font-medium text-foreground"
                            >
                                Author *
                            </label>
                            <input
                                type="text"
                                id="author"
                                name="author"
                                value={existingArticle?.author || ""}
                                required
                                class="w-full rounded-lg border border-border px-3 py-2 focus:border-accent focus:ring-2 focus:ring-accent"
                                placeholder="Author name..."
                            />
                        </div>
                    </div>

                    <div class="mt-4">
                        <label
                            for="description"
                            class="mb-2 block text-sm font-medium text-foreground"
                        >
                            Description *
                        </label>
                        <textarea
                            id="description"
                            name="description"
                            required
                            rows="3"
                            class="w-full rounded-lg border border-border px-3 py-2 focus:border-accent focus:ring-2 focus:ring-accent"
                            placeholder="Brief description of the article..."
                            >{existingArticle?.description || ""}</textarea
                        >
                    </div>

                    <div class="mt-4">
                        <label
                            for="tags"
                            class="mb-2 block text-sm font-medium text-foreground"
                        >
                            Tags
                        </label>
                        <input
                            type="text"
                            id="tags"
                            name="tags"
                            value={existingArticle?.tags?.join(", ") || ""}
                            class="w-full rounded-lg border border-border px-3 py-2 focus:border-accent focus:ring-2 focus:ring-accent"
                            placeholder="Enter tags separated by commas (e.g., javascript, astro, tutorial)"
                        />
                    </div>

                    <div
                        class="mt-8 grid grid-cols-1 gap-6 border-t border-border pt-8 md:grid-cols-2"
                    >
                        <div>
                            <label
                                for="ogImage"
                                class="mb-2 block text-sm font-medium text-foreground"
                            >
                                OG Image URL
                            </label>
                            <input
                                type="url"
                                id="ogImage"
                                name="ogImage"
                                value=""
                                class="w-full rounded-lg border border-border px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                                placeholder="https://example.com/image.jpg"
                            />
                            <p class="mt-1 text-xs text-gray-500">
                                Image URL for social media sharing (recommended:
                                1200x630px)
                            </p>
                        </div>

                        <div>
                            <label
                                for="canonicalURL"
                                class="mb-2 block text-sm font-medium text-foreground"
                            >
                                Canonical URL
                            </label>
                            <input
                                type="url"
                                id="canonicalURL"
                                name="canonicalURL"
                                value=""
                                class="w-full rounded-lg border border-border px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                                placeholder="https://example.com/original-article"
                            />
                            <p class="mt-1 text-xs text-gray-500">
                                Original URL if this article was published
                                elsewhere first
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Article Content Editor -->
                <div class="rounded-lg border border-border bg-muted shadow">
                    <div class="border-b border-border px-6 py-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <h2
                                    class="text-lg font-semibold text-foreground"
                                >
                                    Article Content
                                </h2>
                                <p class="mt-1 text-sm text-foreground/80">
                                    Write your article using Markdown
                                </p>
                            </div>
                            <div class="flex space-x-2">
                                <button
                                    type="button"
                                    id="editTab"
                                    class="rounded-lg bg-accent px-4 py-2 text-sm font-medium text-foreground"
                                >
                                    Edit
                                </button>
                                <button
                                    type="button"
                                    id="previewTab"
                                    class="rounded-lg bg-background px-4 py-2 text-sm font-medium text-foreground hover:bg-muted"
                                >
                                    Preview
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="p-6">
                        <!-- Markdown Editor -->
                        <div id="editor-container">
                            <textarea
                                id="markdown-editor"
                                class="h-96 w-full resize-none rounded-lg border border-border bg-background/80 p-4 font-mono text-sm text-foreground focus:border-accent focus:ring-2 focus:ring-accent"
                                placeholder="Start writing your article in Markdown..."
                                >{
                                    existingArticle?.body || defaultBody
                                }</textarea
                            >
                        </div>

                        <!-- Preview Container -->
                        <div id="preview-container" class="hidden">
                            <div
                                id="markdown-preview"
                                class="prose h-96 max-w-none overflow-y-auto rounded-lg border border-border bg-slate-50 p-4 text-gray-900"
                            >
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div
                    class="flex items-center justify-between rounded-lg bg-muted p-6 shadow"
                >
                    <div class="flex items-center space-x-4">
                        <label class="flex items-center">
                            <input
                                type="checkbox"
                                id="featuredArticle"
                                name="featuredArticle"
                                class="rounded border-border text-accent focus:ring-accent"
                                checked={existingArticle?.featured
                                    ? true
                                    : undefined}
                            />
                            <span class="ml-2 text-sm text-foreground"
                                >Feature this article?</span
                            >
                        </label>
                    </div>

                    <div class="flex space-x-3">
                        <button
                            type="button"
                            onclick="saveDraft()"
                            class="rounded-lg border border-border bg-background px-6 py-3 font-medium text-foreground transition-colors duration-200 hover:bg-muted"
                        >
                            Save as Draft
                        </button>
                        <button
                            type="submit"
                            class="rounded-lg bg-accent px-6 py-3 font-medium text-foreground transition-colors duration-200 hover:bg-accent/80"
                        >
                            {isEditing ? "Update Article" : "Create Article"}
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Use marked.js from cdnjs for markdown parsing -->
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js"
    ></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"
    ></script>
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css"
    />

    <!-- Pass data to client-side -->
    <script
        is:inline
        define:vars={{
            articleContent: existingArticle?.body || defaultBody,
            isEditing: isEditing,
        }}
    >
        // Make data available globally
        window.articleData = {
            content: articleContent,
            isEditing: isEditing,
        };
    </script>

    <script is:inline>
        // Configure marked for syntax highlighting
        if (typeof marked !== "undefined" && typeof hljs !== "undefined") {
            marked.setOptions({
                highlight: function (code, lang) {
                    if (lang && hljs.getLanguage(lang)) {
                        try {
                            return hljs.highlight(code, { language: lang })
                                .value;
                        } catch (err) {
                            return err.message;
                        }
                    }
                    return hljs.highlightAuto(code).value;
                },
                breaks: true,
                gfm: true,
            });
        }

        // Tab switching functionality
        function initializeTabs() {
            const editTab = document.getElementById("editTab");
            const previewTab = document.getElementById("previewTab");
            const editorContainer = document.getElementById("editor-container");
            const previewContainer =
                document.getElementById("preview-container");
            const markdownEditor = document.getElementById("markdown-editor");
            const markdownPreview = document.getElementById("markdown-preview");

            function showEdit() {
                editTab.className =
                    "rounded-lg bg-accent px-4 py-2 text-sm font-medium text-foreground";
                previewTab.className =
                    "rounded-lg bg-background px-4 py-2 text-sm font-medium text-foreground border border-border hover:bg-accent/80";
                editorContainer.classList.remove("hidden");
                previewContainer.classList.add("hidden");
            }

            function showPreview() {
                editTab.className =
                    "rounded-lg bg-background px-4 py-2 text-sm font-medium text-foreground hover:bg-accent/80";
                previewTab.className =
                    "rounded-lg bg-accent px-4 py-2 text-sm font-medium text-white";
                editorContainer.classList.add("hidden");
                previewContainer.classList.remove("hidden");

                // Update preview content
                if (typeof marked !== "undefined") {
                    const markdownContent = markdownEditor.value;
                    markdownPreview.innerHTML = marked.parse(markdownContent);
                } else {
                    markdownPreview.innerHTML =
                        '<p class="text-red-600">Markdown parser not loaded. Please refresh the page.</p>';
                }
            }

            editTab.addEventListener("click", showEdit);
            previewTab.addEventListener("click", showPreview);

            // Initialize with edit tab active
            showEdit();
        }

        // Make saveDraft available globally
        window.saveDraft = saveDraft;

        // Form submission handler
        async function handleFormSubmission(draft = false) {
            const form = document.getElementById("articleForm");
            if (!form) return;

            const isEditing = form.dataset.isEditing === "true";
            const id = form.dataset.id;

            const formData = new FormData(form);
            const markdownEditor = document.getElementById("markdown-editor");

            // Convert FormData to a plain object
            const formObject = {};
            for (const [key, value] of formData.entries()) {
                formObject[key] = value;
            }

            // Add markdown content
            if (markdownEditor) {
                formObject.body = markdownEditor.value;
            }

            // Add draft status
            formObject.draft = draft;

            if (isEditing && id) {
                formObject.id = parseInt(id);
            }

            try {
                const response = await fetch("/api/create-blog", {
                    method: isEditing ? "PUT" : "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(formObject),
                });

                const { data, error } = await response.json();

                if (error) {
                    alert("Failed to save article. Please try again.");
                    return;
                } else {
                    window.location.href = `/admin/manage-article?id=${data[0].id}`;
                }

                alert(
                    window.articleData.isEditing
                        ? "Article updated!"
                        : "Article created!"
                );
            } catch (err) {
                console.error("Network error:", err); //eslint-disable-line no-console
                alert("Failed to save article. Please try again.");
            }
        }

        function saveDraft() {
            handleFormSubmission(true); // Draft submission
        }

        // Set up form submission handler
        function setupFormSubmission() {
            const form = document.getElementById("articleForm");
            if (form) {
                form.addEventListener("submit", function (e) {
                    e.preventDefault();
                    handleFormSubmission(false); // Call submission only on form submit
                });
            }
        }

        // Keyboard shortcuts
        function setupKeyboardShortcuts() {
            const markdownEditor = document.getElementById("markdown-editor");
            if (markdownEditor) {
                markdownEditor.addEventListener("keydown", function (e) {
                    // Ctrl/Cmd + S to save draft
                    if ((e.ctrlKey || e.metaKey) && e.key === "s") {
                        e.preventDefault();
                        saveDraft();
                    }

                    // Tab key handling for indentation
                    if (e.key === "Tab") {
                        e.preventDefault();
                        const start = this.selectionStart;
                        const end = this.selectionEnd;

                        // Insert 2 spaces for tab
                        this.value =
                            this.value.substring(0, start) +
                            "  " +
                            this.value.substring(end);
                        this.selectionStart = this.selectionEnd = start + 2;
                    }
                });
            }
        }

        // Initialize everything when DOM is ready
        function initialize() {
            try {
                initializeTabs();
                setupFormSubmission();
                setupKeyboardShortcuts();
            } catch (error) {
                console.error("Error initializing article editor:", error); //eslint-disable-line no-console
            }
        }

        // Initialize when everything is loaded
        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", initialize);
        } else {
            initialize();
        }
    </script>

    <style>
        /* Custom styles for the markdown editor */
        #markdown-editor {
            font-family: "JetBrains Mono", "Fira Code", "Consolas", monospace;
            line-height: 1.5;
            tab-size: 2;
        }

        /* Preview styles */
        #markdown-preview {
            font-family:
                -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
                sans-serif;
            line-height: 1.6;
        }

        #markdown-preview h1,
        #markdown-preview h2,
        #markdown-preview h3,
        #markdown-preview h4,
        #markdown-preview h5,
        #markdown-preview h6 {
            margin-top: 1.5em;
            margin-bottom: 0.5em;
            font-weight: 600;
        }

        #markdown-preview h1 {
            font-size: 2em;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 0.3em;
        }

        #markdown-preview h2 {
            font-size: 1.5em;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 0.3em;
        }

        #markdown-preview h3 {
            font-size: 1.25em;
        }

        #markdown-preview p {
            margin-bottom: 1em;
        }

        #markdown-preview pre {
            background-color: #f6f8fa;
            padding: 1em;
            border-radius: 0.5em;
            overflow-x: auto;
            border: 1px solid #e1e5e9;
        }

        #markdown-preview code {
            background-color: #f6f8fa;
            padding: 0.2em 0.4em;
            border-radius: 0.25em;
            font-size: 0.875em;
            font-family: "JetBrains Mono", "Fira Code", "Consolas", monospace;
        }

        #markdown-preview pre code {
            background-color: transparent;
            padding: 0;
        }

        #markdown-preview blockquote {
            border-left: 4px solid #d1d5db;
            padding-left: 1em;
            margin-left: 0;
            color: #6b7280;
            font-style: italic;
        }

        #markdown-preview ul,
        #markdown-preview ol {
            padding-left: 2em;
            margin-bottom: 1em;
        }

        #markdown-preview li {
            margin-bottom: 0.5em;
        }

        #markdown-preview a {
            color: #2563eb;
            text-decoration: underline;
        }

        #markdown-preview a:hover {
            color: #1d4ed8;
        }

        #markdown-preview table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 1em;
        }

        #markdown-preview th,
        #markdown-preview td {
            border: 1px solid #d1d5db;
            padding: 0.5em;
            text-align: left;
        }

        #markdown-preview th {
            background-color: #f9fafb;
            font-weight: 600;
        }

        /* Scrollbar styling */
        #markdown-editor::-webkit-scrollbar,
        #markdown-preview::-webkit-scrollbar {
            width: 8px;
        }

        #markdown-editor::-webkit-scrollbar-track,
        #markdown-preview::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #markdown-editor::-webkit-scrollbar-thumb,
        #markdown-preview::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

        #markdown-editor::-webkit-scrollbar-thumb:hover,
        #markdown-preview::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
</Layout>
