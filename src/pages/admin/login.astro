---
// admin-login.astro
import Layout from "@/layouts/Layout.astro";

const title: string = "Admin Portal - Login";
---

<Layout title={title}>
  <main class="relative min-h-screen overflow-hidden">
    <!-- Animated Background Stars -->
    <div class="absolute inset-0 overflow-hidden">
      <div
        class="absolute top-1/4 left-1/5 h-0.5 w-0.5 animate-pulse rounded-full bg-foreground opacity-70"
      >
      </div>
      <div
        class="animation-delay-500 absolute top-1/3 right-1/4 h-1 w-1 animate-ping rounded-full bg-foreground opacity-50"
      >
      </div>
      <div
        class="animation-delay-1000 absolute bottom-1/3 left-1/6 h-0.5 w-0.5 animate-pulse rounded-full bg-foreground opacity-60"
      >
      </div>
      <div
        class="animation-delay-1500 absolute top-1/2 right-1/5 h-1 w-1 animate-ping rounded-full bg-foreground opacity-40"
      >
      </div>
      <div
        class="animation-delay-2000 absolute right-1/2 bottom-1/4 h-0.5 w-0.5 animate-pulse rounded-full bg-foreground opacity-80"
      >
      </div>
      <div
        class="animation-delay-300 absolute top-1/6 right-1/12 h-0.5 w-0.5 animate-pulse rounded-full bg-foreground opacity-50"
      >
      </div>
      <div
        class="animation-delay-1200 absolute bottom-1/6 left-1/3 h-1 w-1 animate-ping rounded-full bg-foreground opacity-60"
      >
      </div>
      <div
        class="animation-delay-800 absolute top-2/5 left-2/5 h-0.5 w-0.5 animate-pulse rounded-full bg-foreground opacity-70"
      >
      </div>
    </div>

    <!-- Main Content -->
    <div
      class="relative z-10 flex min-h-screen items-center justify-center px-4"
    >
      <div
        class="w-full max-w-md transform rounded-3xl border border-foreground/10 bg-foreground/5 p-8 shadow-2xl backdrop-blur-xl transition-all duration-700 hover:scale-[1.02]"
      >
        <!-- Logo Section -->
        <div class="mb-8 text-center">
          <h1
            class="my-2 bg-accent bg-clip-text text-4xl font-bold text-transparent"
          >
            Admin Login
          </h1>
          <p class="text-sm text-foreground/70">
            Access the dashboard to create and manage blog content.
          </p>
        </div>

        <!-- Login Form -->
        <form id="loginForm" class="space-y-6">
          <!-- Username Field -->
          <div class="space-y-2">
            <label
              for="username"
              class="block text-sm font-medium text-foreground/90"
            >
              Username or Email
            </label>
            <input
              type="text"
              id="username"
              name="username"
              required
              class="w-full rounded-xl border border-foreground/15 bg-foreground/8 px-4 py-3 text-foreground placeholder-foreground/50 transition-all duration-300 hover:bg-foreground/12 focus:border-transparent focus:ring-2 focus:ring-accent focus:outline-none"
              placeholder="Enter your username"
            />
          </div>

          <!-- Password Field -->
          <div class="space-y-2">
            <label
              for="password"
              class="block text-sm font-medium text-foreground/90"
            >
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              required
              class="w-full rounded-xl border border-foreground/15 bg-foreground/8 px-4 py-3 text-foreground placeholder-foreground/50 transition-all duration-300 hover:bg-foreground/12 focus:border-transparent focus:ring-2 focus:ring-accent focus:outline-none"
              placeholder="Enter your password"
            />
          </div>

          <!-- Forgot Password -->
          <div class="text-right">
            <button
              type="button"
              id="forgot-password-btn"
              class="text-sm text-accent/80 transition-colors duration-300 hover:text-accent/100"
            >
              Forgot Password?
            </button>
          </div>

          <!-- Login Button -->
          <button
            type="submit"
            class="w-full transform rounded-xl bg-accent px-4 py-3 font-semibold text-foreground transition-all duration-300 hover:scale-[1.02] hover:shadow-lg hover:shadow-blue-500/25 focus:outline-none"
          >
            <span class="login-text">Sign In to Dashboard</span>
          </button>
        </form>

        <!-- Divider -->
        <div class="my-6 flex items-center">
          <div class="flex-1 border-t border-foreground/20"></div>
          <span class="px-4 text-sm text-foreground/60">or continue with</span>
          <div class="flex-1 border-t border-foreground/20"></div>
        </div>

        <!-- Social Login -->
        <div class="grid grid-cols-2 gap-3">
          <button
            id="google-login"
            class="flex transform items-center justify-center rounded-xl border border-foreground/15 bg-foreground/8 px-4 py-3 text-foreground/80 transition-all duration-300 hover:scale-[1.02] hover:bg-foreground/12 hover:text-foreground"
          >
            <span class="text-sm font-medium">Google</span>
          </button>
          <button
            id="github-login"
            class="flex transform items-center justify-center rounded-xl border border-foreground/15 bg-foreground/8 px-4 py-3 text-foreground/80 transition-all duration-300 hover:scale-[1.02] hover:bg-foreground/12 hover:text-foreground"
          >
            <span class="text-sm font-medium">Github</span>
          </button>
        </div>

        <!-- Footer -->
        <p class="mt-8 text-center text-sm text-foreground/60">
          Powered by Supabase Auth
        </p>
      </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
  </main>
</Layout>

<style>
  .animation-delay-300 {
    animation-delay: 0.3s;
  }
  .animation-delay-500 {
    animation-delay: 0.5s;
  }
  .animation-delay-800 {
    animation-delay: 0.8s;
  }
  .animation-delay-1000 {
    animation-delay: 1s;
  }
  .animation-delay-1200 {
    animation-delay: 1.2s;
  }
  .animation-delay-1500 {
    animation-delay: 1.5s;
  }
  .animation-delay-2000 {
    animation-delay: 2s;
  }

  /* Custom animations for enhanced UX */
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOutRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  .slide-in-right {
    animation: slideInRight 0.3s ease-out;
  }

  .slide-out-right {
    animation: slideOutRight 0.3s ease-out;
  }
</style>

<script>
  interface AuthProvider {
    google: string;
    github: string;
  }

  // Toast notification system with proper typing
  function showToast(
    message: string,
    type: "success" | "error" | "info" = "info"
  ): void {
    const container = document.getElementById("toast-container");
    if (!container) return;

    // Create toast element
    const toast: HTMLDivElement = document.createElement("div");
    toast.className = `slide-in-right px-6 py-4 rounded-xl text-white font-medium shadow-lg max-w-sm`;

    // Set background color based on type
    const colors: Record<string, string> = {
      success: "bg-gradient-to-r from-green-500 to-emerald-600",
      error: "bg-gradient-to-r from-red-500 to-rose-600",
      info: "bg-gradient-to-r from-blue-500 to-indigo-600",
    };
    toast.classList.add(colors[type] || colors.info);

    toast.textContent = message;

    // Add to container
    container.appendChild(toast);

    // Auto remove after 4 seconds
    setTimeout(() => {
      toast.classList.remove("slide-in-right");
      toast.classList.add("slide-out-right");

      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, 300);
    }, 4000);
  }

  // Social login handler with proper typing
  function socialLogin(provider: keyof AuthProvider): void {
    showToast(`Redirecting to ${provider} authentication...`, "info");

    // In a real app, redirect to OAuth provider
    setTimeout(() => {
      const authUrls: AuthProvider = {
        google: "/auth/google",
        github: "/auth/github",
      };
      window.location.href = authUrls[provider];
    }, 1000);
  }

  // Forgot password handler
  function showForgotPassword(): void {
    showToast("Password reset instructions will be sent to your email", "info");

    // In a real app, show modal or redirect to forgot password page
    setTimeout(() => {
      window.location.href = "/admin/forgot-password";
    }, 2000);
  }

  // Initialize event listeners when page loads
  document.addEventListener("astro:page-load", () => {
    // Form submission handler
    const loginForm = document.getElementById("loginForm") as HTMLFormElement;
    if (loginForm) {
      loginForm.addEventListener("submit", async function (e: Event) {
        e.preventDefault();

        const username: string =
          (document.getElementById("username") as HTMLInputElement)?.value ||
          "";
        const password: string =
          (document.getElementById("password") as HTMLInputElement)?.value ||
          "";

        if (!username || !password) {
          showToast("Please fill in all fields", "error");
          return;
        }

        // Show loading state
        const button = this.querySelector(
          'button[type="submit"]'
        ) as HTMLButtonElement;
        const loginText = button?.querySelector(
          ".login-text"
        ) as HTMLSpanElement;
        const originalText: string = loginText?.textContent || "";

        if (loginText) loginText.textContent = "Signing In...";
        if (button) {
          button.disabled = true;
          button.classList.add("opacity-70");
        }

        try {
          // Simulate API call with proper typing
          await new Promise<void>(resolve => setTimeout(resolve, 2000));

          // Simulate successful login
          showToast("Login successful! Redirecting to dashboard...", "success");

          setTimeout(() => {
            // In a real app, redirect to dashboard
            window.location.href = "/admin/dashboard";
          }, 1500);
        } catch (error: unknown) {
          const errorMessage =
            error instanceof Error
              ? error.message
              : "Invalid credentials. Please try again.";
          showToast(errorMessage, "error");

          // Reset button state
          if (loginText) loginText.textContent = originalText;
          if (button) {
            button.disabled = false;
            button.classList.remove("opacity-70");
          }
        }
      });
    }

    // Social login buttons
    const googleBtn = document.getElementById("google-login");
    const githubBtn = document.getElementById("microsoft-login");
    const forgotBtn = document.getElementById("forgot-password-btn");

    if (googleBtn) {
      googleBtn.addEventListener("click", () => socialLogin("google"));
    }

    if (githubBtn) {
      githubBtn.addEventListener("click", () => socialLogin("github"));
    }

    if (forgotBtn) {
      forgotBtn.addEventListener("click", showForgotPassword);
    }

    // Add input focus effects with proper typing
    document.querySelectorAll("input").forEach((input: Element) => {
      const htmlInput = input as HTMLInputElement;

      htmlInput.addEventListener("focus", function (this: HTMLInputElement) {
        this.parentElement?.classList.add("transform", "scale-[1.02]");
      });

      htmlInput.addEventListener("blur", function (this: HTMLInputElement) {
        this.parentElement?.classList.remove("transform", "scale-[1.02]");
      });
    });
  });
</script>
