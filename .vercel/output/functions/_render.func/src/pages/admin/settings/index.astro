---
export const prerender = false;
import { supabase } from "@/lib/supabaseClient";
import { SITE } from "@/config";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import Layout from "@/layouts/Layout.astro";
import FileText from "@/assets/icons/IconFileText.svg";
import ChevronDown from "@/assets/icons/IconChevronDown.svg";
import Database from "@/assets/icons/IconDatabase.svg";
import AlertTriangle from "@/assets/icons/IconAlertTriangle.svg";
import { slugifyStr } from "@/utils/slugify";

type LocalBlogFilesType = {
    filename: string;
    title: string;
    author: string;
    pubDatetime: string;
    description: string;
    draft: boolean;
    tags: string[];
    featured: boolean;
};

type MinimalBlogPost = {
    title: string;
    draft: boolean;
};

const getLocalBlogFiles = async () => {
    try {
        // You'll need to implement this based on your file structure
        // This is a placeholder - adjust according to your actual blog file location
        const response = await fetch(`${Astro.url.origin}/api/blog-files`);
        const files = await response.json();
        return files;
    } catch (error) {
        console.error("Error reading local files:", error); //eslint-disable-line no-console
        return [];
    }
};

let stats: {
    totalArticles: number;
    publishedArticles: number;
    localFiles: LocalBlogFilesType[]; // or a specific type if you know it
    supabaseBlogs: { title: string; draft: boolean }[];
    loading: boolean;
} = {
    totalArticles: 0,
    publishedArticles: 0,
    localFiles: [],
    supabaseBlogs: [],
    loading: false,
};

let localOnlyBlogs: LocalBlogFilesType[] = [];
let dbOnlyBlogs: MinimalBlogPost[] = [];
let unpublishedInDb: MinimalBlogPost[] = [];

let SystemStatsFetchError = null;

try {
    // Fetch Supabase data
    const { count: totalArticles } = await supabase
        .from("blogs")
        .select("*", { count: "exact", head: true });

    const { count: publishedArticles } = await supabase
        .from("blogs")
        .select("*", { count: "exact", head: true })
        .eq("draft", false);

    const { data: supabaseBlogs } = await supabase
        .from("blogs")
        .select("title, draft");

    const localFiles = await getLocalBlogFiles();

    stats = {
        totalArticles: totalArticles || 0,
        publishedArticles: publishedArticles || 0,
        localFiles: localFiles || [],
        supabaseBlogs: supabaseBlogs || [],
        loading: false,
    };

    // Calculate comparison data
    const localTitles = new Set(stats.localFiles.map(file => file.title));
    const dbTitles = new Set(stats.supabaseBlogs.map(blog => blog.title));

    localOnlyBlogs = stats.localFiles.filter(file => !dbTitles.has(file.title));
    dbOnlyBlogs = stats.supabaseBlogs.filter(
        blog => !localTitles.has(blog.title)
    );
    unpublishedInDb = stats.supabaseBlogs.filter(blog => blog.draft);
} catch (error) {
    SystemStatsFetchError = error;
}

// Get webhook URL from environment
const hostingPlatform: string = SITE.hosting;
let webhookUrl = "";

switch (hostingPlatform) {
    case "vercel":
        webhookUrl = import.meta.env.VERCEL_DEPLOY_HOOK;
        break;
    case "netlify":
        webhookUrl = import.meta.env.NETLIFY_BUILD_HOOK;
        break;
    case "github":
        // GitHub Actions workflow dispatch
        webhookUrl = `https://api.github.com/repos/${import.meta.env.GITHUB_REPO}/dispatches`;
        break;
    default:
        return new Response("Platform not configured", { status: 400 });
}
---

<Layout>
    <div
        class="flex max-h-screen min-h-screen flex-col overflow-hidden bg-background/80 text-foreground"
    >
        <!-- Header -->
        <header class="flex-shrink-0 border-b bg-background shadow-sm">
            <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between py-6">
                    <div>
                        <h1 class="text-3xl font-bold text-foreground">
                            Admin Settings
                        </h1>
                        <p class="mt-1 text-foreground/80">
                            Manage your blog configuration and deployment
                            settings
                        </p>
                    </div>
                    <div class="flex items-center space-x-8">
                        {
                            SITE.lightAndDarkMode && (
                                <button
                                    id="theme-btn"
                                    class="focus-outline relative size-16 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
                                    title="Toggles light & dark"
                                    aria-label="auto"
                                    aria-live="polite"
                                >
                                    <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                                    <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
                                </button>
                            )
                        }
                        <a
                            href="/admin"
                            class="flex items-center space-x-2 rounded-lg bg-accent px-6 py-3 font-medium text-foreground transition-colors duration-200 hover:bg-accent/80"
                        >
                            <svg
                                class="h-5 w-5"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"
                                ></path>
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M8 5v4"></path>
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M12 5v4"></path>
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M16 5v4"></path>
                            </svg>
                            <span>Back to Dashboard</span>
                        </a>
                    </div>
                </div>
            </div>
        </header>

        <div
            class="mx-auto flex min-h-0 w-full max-w-7xl flex-1 flex-col overflow-y-auto px-4 py-8 sm:px-6 lg:px-8"
        >
            <!-- System Statistics -->
            <div class="mb-8 rounded-lg bg-muted p-6 shadow">
                <h2 class="mb-6 text-2xl font-semibold text-foreground">
                    System Statistics
                </h2>

                {
                    SystemStatsFetchError && (
                        <div>Failed to load System statistics</div>
                    )
                }
                <!-- Main Statistics Grid -->
                <div class="grid gap-6 md:grid-cols-3">
                    <div class="rounded-lg bg-background p-4 text-center">
                        <div class="text-3xl font-bold text-blue-600">
                            {stats.totalArticles}
                        </div>
                        <div class="text-sm font-medium text-foreground/80">
                            Total Articles (DB)
                        </div>
                    </div>

                    <div class="rounded-lg bg-background p-4 text-center">
                        <div class="text-3xl font-bold text-green-600">
                            {stats.publishedArticles}
                        </div>
                        <div class="text-sm font-medium text-foreground/80">
                            Published Articles
                        </div>
                    </div>

                    <div class="rounded-lg bg-background p-4 text-center">
                        <div class="text-3xl font-bold text-yellow-600">
                            {stats.totalArticles - stats.publishedArticles}
                        </div>
                        <div class="text-sm font-medium text-foreground/80">
                            Draft Articles
                        </div>
                    </div>
                </div>

                <!-- File Comparison Section -->
                <div class="mt-8">
                    <h3 class="mb-4 text-xl font-semibold text-foreground">
                        File Synchronization Status
                    </h3>

                    <div class="grid gap-4 md:grid-cols-3">
                        <!-- Local Files -->
                        <div class="rounded-lg bg-background p-4">
                            <div class="mb-2 flex items-center justify-between">
                                <div class="flex items-center gap-2">
                                    <FileText class="h-5 w-5 text-blue-600" />
                                    <span class="font-semibold text-blue-600">
                                        {stats.localFiles.length}
                                    </span>
                                </div>
                                <span
                                    class="text-sm font-medium text-foreground/80"
                                >
                                    Local Files
                                </span>
                            </div>
                            <div class="text-xs text-foreground/60">
                                /src/data/blog/*.md
                            </div>
                        </div>

                        <!-- Database Files -->
                        <div class="rounded-lg bg-background p-4">
                            <div class="mb-2 flex items-center justify-between">
                                <div class="flex items-center gap-2">
                                    <Database class="h-5 w-5 text-green-600" />
                                    <span class="font-semibold text-green-600">
                                        {stats.supabaseBlogs.length}
                                    </span>
                                </div>
                                <span
                                    class="text-sm font-medium text-foreground/80"
                                >
                                    Database Entries
                                </span>
                            </div>
                            <div class="text-xs text-foreground/60">
                                Supabase blogs table
                            </div>
                        </div>

                        <!-- Sync Issues -->
                        <div class="rounded-lg bg-background p-4">
                            <div class="mb-2 flex items-center justify-between">
                                <div class="flex items-center gap-2">
                                    <AlertTriangle
                                        class="h-5 w-5 text-orange-600"
                                    />
                                    <span class="font-semibold text-orange-600">
                                        {
                                            localOnlyBlogs.length +
                                                dbOnlyBlogs.length
                                        }
                                    </span>
                                </div>
                                <span
                                    class="text-sm font-medium text-foreground/80"
                                >
                                    Sync Issues
                                </span>
                            </div>
                            <div class="text-xs text-foreground/60">
                                Files/DB mismatches
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Detailed Lists -->
                <div class="mt-6 space-y-4">
                    <!-- Local Only Files -->
                    {
                        localOnlyBlogs.length > 0 && (
                            <div class="rounded-lg border border-red-200 bg-background p-4">
                                <button
                                    class="toggle-details flex w-full items-center justify-between text-left"
                                    data-target="localOnly"
                                >
                                    <div class="flex items-center gap-2">
                                        <AlertTriangle class="h-4 w-4 text-red-600" />
                                        <span class="font-medium text-red-800">
                                            {`Files not in Database (${localOnlyBlogs.length})`}
                                        </span>
                                    </div>
                                    <ChevronDown class="chevron-icon h-4 w-4 text-red-600" />
                                </button>

                                <div
                                    class="details-content mt-3 hidden space-y-2"
                                    id="localOnly"
                                >
                                    <p class="mb-2 text-sm text-red-700">
                                        These files exist locally but are not in
                                        your Supabase database. You may need to
                                        rebuild your app to publish them.
                                    </p>
                                    {localOnlyBlogs.map(file => (
                                        <div class="rounded border border-border bg-muted p-2 text-sm">
                                            <div class="font-medium">
                                                {file.title}
                                            </div>
                                            <div class="text-gray-600">
                                                File:{" "}
                                                {slugifyStr(file.title) + ".md"}
                                            </div>
                                            <div class="text-gray-600">
                                                Draft:{" "}
                                                {file.draft ? "Yes" : "No"}
                                            </div>
                                            {file.pubDatetime && (
                                                <div class="text-gray-600">
                                                    Date:{" "}
                                                    {new Date(
                                                        file.pubDatetime
                                                    ).toLocaleDateString()}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )
                    }

                    <!-- Database Only Files -->
                    {
                        dbOnlyBlogs.length > 0 && (
                            <div class="rounded-lg border border-yellow-200 bg-background p-4">
                                <button
                                    class="toggle-details flex w-full items-center justify-between text-left"
                                    data-target="dbOnly"
                                >
                                    <div class="flex items-center gap-2">
                                        <AlertTriangle class="h-4 w-4 text-yellow-600" />
                                        <span class="font-medium text-yellow-800">
                                            {`Database entries without local files (${dbOnlyBlogs.length})`}
                                        </span>
                                    </div>
                                    <ChevronDown class="chevron-icon h-4 w-4 text-yellow-600" />
                                </button>

                                <div
                                    class="details-content mt-3 hidden space-y-2"
                                    id="dbOnly"
                                >
                                    <p class="mb-2 text-sm text-yellow-700">
                                        These entries exist in your database but
                                        don't have corresponding local markdown
                                        files.
                                    </p>
                                    {dbOnlyBlogs.map(blog => (
                                        <div class="rounded border border-border bg-muted p-2 text-sm">
                                            <div class="font-medium">
                                                {blog.title}
                                            </div>
                                            <div class="text-gray-600">
                                                Status:{" "}
                                                {blog.draft
                                                    ? "Draft"
                                                    : "Published"}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )
                    }

                    <!-- Unpublished Articles -->
                    {
                        unpublishedInDb.length > 0 && (
                            <div class="rounded-lg border border-blue-200 bg-background p-4">
                                <button
                                    class="toggle-details flex w-full items-center justify-between text-left"
                                    data-target="unpublished"
                                >
                                    <div class="flex items-center gap-2">
                                        <FileText class="h-4 w-4 text-blue-600" />
                                        <span class="font-medium text-blue-800">
                                            {`Unpublished Articles (${unpublishedInDb.length})`}
                                        </span>
                                    </div>
                                    <ChevronDown class="chevron-icon h-4 w-4 text-blue-600" />
                                </button>

                                <div
                                    class="details-content mt-3 hidden space-y-2"
                                    id="unpublished"
                                >
                                    <p class="mb-2 text-sm text-blue-700">
                                        These articles are marked as drafts in
                                        your database.
                                    </p>
                                    {unpublishedInDb.map(blog => (
                                        <div class="rounded border border-border bg-muted p-2 text-sm">
                                            <div class="font-medium">
                                                {blog.title}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )
                    }

                    <!-- All Good Message -->
                    {
                        localOnlyBlogs.length === 0 &&
                            dbOnlyBlogs.length === 0 && (
                                <div class="rounded-lg border border-green-200 bg-green-50 p-4">
                                    <div class="flex items-center gap-2">
                                        <div class="h-4 w-4 rounded-full bg-green-600" />
                                        <span class="font-medium text-green-800">
                                            All files are synchronized between
                                            local directory and database
                                        </span>
                                    </div>
                                </div>
                            )
                    }
                </div>
            </div>

            <!-- Deployment Section -->
            <div class="mb-8 rounded-lg bg-muted p-6 shadow">
                <div class="mb-6 flex items-center justify-between">
                    <div>
                        <h2 class="text-2xl font-semibold text-foreground">
                            Deployment Settings
                        </h2>
                        <p class="mt-1 text-sm text-foreground/80">
                            Manage your blog deployment and build triggers
                        </p>
                    </div>
                    <div class="text-right">
                        <span
                            class="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-sm font-medium text-blue-800"
                        >
                            {
                                hostingPlatform.charAt(0).toUpperCase() +
                                    hostingPlatform.slice(1)
                            }
                        </span>
                    </div>
                </div>

                <!-- Deploy Button -->
                <div
                    class="mb-6 rounded-lg border border-border bg-background p-4"
                >
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="font-medium text-foreground">
                                Trigger Deployment
                            </h3>
                            <p class="text-sm text-foreground/80">
                                Rebuild and deploy your site with latest
                                published articles
                            </p>
                        </div>
                        <button
                            id="deploy-btn"
                            data-webhook-url={webhookUrl}
                            data-hosting-platform={hostingPlatform}
                            class="flex items-center space-x-2 rounded-lg bg-green-600 px-6 py-3 font-medium text-white transition-colors duration-200 hover:bg-green-700 disabled:cursor-not-allowed disabled:bg-gray-400"
                        >
                            <svg
                                class="h-5 w-5"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                            </svg>
                            <span>Deploy Now</span>
                        </button>
                    </div>
                    <div id="deploy-status" class="mt-4 hidden"></div>
                </div>

                <!-- Webhook URL -->
                <div
                    class="mb-6 rounded-lg border border-border bg-background p-4"
                >
                    <h3 class="mb-2 font-medium text-foreground">
                        Webhook URL
                    </h3>
                    <div class="flex items-center space-x-3">
                        <code
                            class="flex-1 rounded bg-muted px-3 py-2 font-mono text-sm text-foreground"
                        >
                            {webhookUrl}
                        </code>
                        <button
                            onclick={`navigator.clipboard.writeText('${webhookUrl}')`}
                            class="rounded-lg p-2 text-gray-600 transition-colors duration-200 hover:bg-gray-100 hover:text-gray-800"
                            title="Copy webhook URL"
                        >
                            <svg
                                class="h-5 w-5"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                                ></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Site Configuration -->
            <div class="mb-8 rounded-lg bg-muted p-6 shadow">
                <h2 class="mb-6 text-2xl font-semibold text-foreground">
                    Site Configuration
                </h2>

                <div class="grid gap-6 md:grid-cols-2">
                    <!-- Basic Info -->
                    <div class="space-y-4">
                        <h3 class="text-lg font-medium text-foreground">
                            Basic Information
                        </h3>

                        <div>
                            <label
                                class="block text-sm font-medium text-foreground/80"
                                >Website URL</label
                            >
                            <div class="mt-1 rounded bg-background px-3 py-2">
                                <a
                                    href={SITE.website}
                                    target="_blank"
                                    class="text-accent hover:text-accent/80"
                                >
                                    {SITE.website}
                                </a>
                            </div>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium text-foreground/80"
                                >Title</label
                            >
                            <div
                                class="mt-1 rounded bg-background px-3 py-2 text-foreground"
                            >
                                {SITE.title}
                            </div>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium text-foreground/80"
                                >Description</label
                            >
                            <div
                                class="mt-1 rounded bg-background px-3 py-2 text-foreground"
                            >
                                {SITE.desc}
                            </div>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium text-foreground/80"
                                >Author</label
                            >
                            <div class="mt-1 rounded bg-background px-3 py-2">
                                <a
                                    href={SITE.profile}
                                    target="_blank"
                                    class="text-accent hover:text-accent/80"
                                >
                                    {SITE.author}
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Display Settings -->
                    <div class="space-y-4">
                        <h3 class="text-lg font-medium text-foreground">
                            Display Settings
                        </h3>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label
                                    class="block text-sm font-medium text-foreground/80"
                                    >Posts per Index</label
                                >
                                <div
                                    class="mt-1 rounded bg-background px-3 py-2 text-foreground"
                                >
                                    {SITE.postPerIndex}
                                </div>
                            </div>
                            <div>
                                <label
                                    class="block text-sm font-medium text-foreground/80"
                                    >Posts per Page</label
                                >
                                <div
                                    class="mt-1 rounded bg-background px-3 py-2 text-foreground"
                                >
                                    {SITE.postPerPage}
                                </div>
                            </div>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium text-foreground/80"
                                >Language & Direction</label
                            >
                            <div class="mt-1 flex space-x-2">
                                <div
                                    class="flex-1 rounded bg-background px-3 py-2 text-foreground"
                                >
                                    Lang: {SITE.lang || "en"}
                                </div>
                                <div
                                    class="flex-1 rounded bg-background px-3 py-2 text-foreground"
                                >
                                    Dir: {SITE.dir}
                                </div>
                            </div>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium text-foreground/80"
                                >Timezone</label
                            >
                            <div
                                class="mt-1 rounded bg-background px-3 py-2 text-foreground"
                            >
                                {SITE.timezone}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Feature Toggles -->
                <div class="mt-6 space-y-4">
                    <h3 class="text-lg font-medium text-foreground">
                        Features
                    </h3>
                    <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                        <div
                            class="flex items-center justify-between rounded bg-background p-3"
                        >
                            <span class="text-sm font-medium text-foreground"
                                >Dark Mode</span
                            >
                            <span
                                class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                    SITE.lightAndDarkMode
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                }`}
                            >
                                {SITE.lightAndDarkMode ? "Enabled" : "Disabled"}
                            </span>
                        </div>

                        <div
                            class="flex items-center justify-between rounded bg-background p-3"
                        >
                            <span class="text-sm font-medium text-foreground"
                                >Show Archives</span
                            >
                            <span
                                class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                    SITE.showArchives
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                }`}
                            >
                                {SITE.showArchives ? "Enabled" : "Disabled"}
                            </span>
                        </div>

                        <div
                            class="flex items-center justify-between rounded bg-background p-3"
                        >
                            <span class="text-sm font-medium text-foreground"
                                >Back Button</span
                            >
                            <span
                                class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                    SITE.showBackButton
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                }`}
                            >
                                {SITE.showBackButton ? "Enabled" : "Disabled"}
                            </span>
                        </div>

                        <div
                            class="flex items-center justify-between rounded bg-background p-3"
                        >
                            <span class="text-sm font-medium text-foreground"
                                >Dynamic OG Images</span
                            >
                            <span
                                class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                    SITE.dynamicOgImage
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                }`}
                            >
                                {SITE.dynamicOgImage ? "Enabled" : "Disabled"}
                            </span>
                        </div>

                        <div
                            class="flex items-center justify-between rounded bg-background p-3"
                        >
                            <span class="text-sm font-medium text-foreground"
                                >Edit Post</span
                            >
                            <span
                                class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                                    SITE.editPost?.enabled
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                }`}
                            >
                                {
                                    SITE.editPost?.enabled
                                        ? "Enabled"
                                        : "Disabled"
                                }
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Advanced Settings -->
            <div class="rounded-lg bg-muted p-6 shadow">
                <h2 class="mb-6 text-2xl font-semibold text-foreground">
                    Advanced Settings
                </h2>

                <div class="space-y-4">
                    <div>
                        <label
                            class="block text-sm font-medium text-foreground/80"
                            >OG Image</label
                        >
                        <div
                            class="mt-1 rounded bg-background px-3 py-2 text-foreground"
                        >
                            {SITE.ogImage}
                        </div>
                    </div>

                    {
                        SITE.editPost?.enabled && (
                            <div>
                                <label class="block text-sm font-medium text-foreground/80">
                                    Edit Post URL
                                </label>
                                <div class="mt-1 rounded bg-background px-3 py-2">
                                    <a
                                        href={SITE.editPost.url}
                                        target="_blank"
                                        class="text-accent hover:text-accent/80"
                                    >
                                        {SITE.editPost.url}
                                    </a>
                                </div>
                                <p class="mt-1 text-xs text-foreground/60">
                                    Button text: "{SITE.editPost.text}"
                                </p>
                            </div>
                        )
                    }
                </div>
            </div>
        </div>
    </div>

    <script>
        // Deploy functionality
        document
            .getElementById("deploy-btn")
            ?.addEventListener("click", async event => {
                const button = event.currentTarget as HTMLButtonElement;
                const statusDiv = document.getElementById("deploy-status");

                // Get webhook URL and platform from data attributes
                const webhookUrl = button.dataset.webhookUrl ?? "";
                const hostingPlatform = button.dataset.hostingPlatform;

                if (!webhookUrl && statusDiv) {
                    statusDiv.classList.remove("hidden");
                    statusDiv.innerHTML = `
                        <div class="bg-red-100 text-red-800 p-3 rounded-lg">
                            ❌ Webhook URL not configured
                        </div>
                    `;
                    return;
                }

                // Disable button and show loading state
                button.disabled = true;
                button.innerHTML = `
                    <svg class="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                    </svg>
                    <span>Deploying...</span>
                `;

                if (statusDiv) {
                    // Show status div
                    statusDiv.classList.remove("hidden");
                    statusDiv.innerHTML = `
                        <div class="bg-blue-100 text-blue-800 p-3 rounded-lg">
                            🚀 Triggering deployment... This may take 2-3 minutes.
                        </div>
                    `;
                }

                try {
                    const requestOptions = {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({}),
                    };

                    // Add GitHub-specific headers if needed
                    if (hostingPlatform === "github") {
                        requestOptions.body = JSON.stringify({
                            event_type: "rebuild-blog",
                            client_payload: { action: "deploy" },
                        });
                        // Note: GitHub token would need to be handled differently in production
                        // Consider using a server-side API endpoint instead
                    }

                    const response = await fetch(webhookUrl, requestOptions);

                    if (response.ok && statusDiv) {
                        statusDiv.innerHTML = `
                        <div class="bg-green-100 text-green-800 p-3 rounded-lg">
                            ✅ Deployment triggered successfully! Your site will be updated in a few minutes.
                        </div>
                    `;

                        // Refresh the page after 3 seconds to show updated deployment info
                        setTimeout(() => {
                            window.location.reload();
                        }, 3000);
                    } else {
                        const errorText = await response.text();
                        if (statusDiv) {
                            statusDiv.innerHTML = `
                                <div class="bg-red-100 text-red-800 p-3 rounded-lg">
                                    ❌ Deployment failed: ${response.status} ${response.statusText} ${errorText}
                                </div>
                            `;
                        }
                    }
                } catch (error) {
                    if (statusDiv) {
                        const message =
                            error instanceof Error
                                ? error.message
                                : String(error);
                        statusDiv.innerHTML = `
                            <div class="bg-red-100 text-red-800 p-3 rounded-lg">
                                ❌ Error: ${message}
                            </div>
                        `;
                    }
                } finally {
                    // Re-enable button
                    button.disabled = false;
                    button.innerHTML = `
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                    <span>Deploy Now</span>
                `;
                }
            });

        document.addEventListener("DOMContentLoaded", function () {
            const toggleButtons = document.querySelectorAll(".toggle-details");

            toggleButtons.forEach(button => {
                button.addEventListener("click", function (this: HTMLElement) {
                    const targetId = this.getAttribute("data-target") ?? "";
                    const content = document.getElementById(targetId);
                    const chevron = this.querySelector(".chevron-icon");

                    if (content && chevron) {
                        const isHidden = content.classList.contains("hidden");

                        if (isHidden) {
                            content.classList.remove("hidden");
                            chevron.innerHTML = '<path d="m18 15-6-6-6 6"/>'; // ChevronUp path
                        } else {
                            content.classList.add("hidden");
                            chevron.innerHTML = '<path d="m6 9 6 6 6-6"/>'; // ChevronDown path
                        }
                    }
                });
            });
        });

        // Copy webhook URL functionality
        // function copyToClipboard(text: string) {
        //     navigator.clipboard.writeText(text).then(() => {
        //         // Show temporary success message
        //         const button = event.target.closest("button");
        //         const originalHTML = button.innerHTML;
        //         button.innerHTML = `
        //             <svg class="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        //                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        //             </svg>
        //         `;
        //         setTimeout(() => {
        //             button.innerHTML = originalHTML;
        //         }, 2000);
        //     });
        // }
    </script>
</Layout>
